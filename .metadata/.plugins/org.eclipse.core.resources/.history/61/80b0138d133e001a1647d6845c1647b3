package com.coursecube.spring.config;
import java.util.Properties;

import javax.sql.DataSource;

import org.hibernate.SessionFactory;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate5.HibernateTemplate;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
import org.springframework.web.servlet.view.JstlView;

@Configuration
@EnableWebMvc
@EnableTransactionManagement
@ComponentScan({"com.coursecube.spring"})
public class JLCWebConfig {

	@Bean
	public InternalResourceViewResolver viewresolver()
	{
		InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
		viewResolver.setViewClass(JstlView.class);
		viewResolver.setPrefix("/WEB-INF/myjsps/");
		viewResolver.setSuffix(".jsp");
		return viewResolver;
	}
		
    @Bean
    public MessageSource messageSource()
    {
    	ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
    	messageSource.setBasename("classpath:messages");
    	messageSource.setDefaultEncoding("UTF-8");
    	return messageSource;
    }
    
    @Bean
    public DataSource dataSource()
    {
    	DriverManagerDataSource ds = new DriverManagerDataSource();
    	ds.setDriverClassName("com.mysql.jdbc.Driver");
    	ds.setUrl("jdbc:mysql://localhost:3306/bookstoredb");
    	ds.setUsername("root");
    	ds.setPassword("vimal");
    	return ds;
    }
    	
    @Bean
    public HibernateTemplate hibernateTemp(SessionFactory sessionFactory)
    {
    	return new HibernateTemplate(sessionFactory);
    }
    
    @Bean
     public PlatformTransactionManager transactionManager(SessionFactory sessionFactory)
     {
    	return new HibernateTransactionManager(sessionFactory);
     }
    
    @Bean
    public LocalSessionFactoryBean sessionFactory(DataSource dataSource)
    {
    	LocalSessionFactoryBean sessionFactoryBean  = new LocalSessionFactoryBean();
    	sessionFactoryBean.setDataSource(dataSource);
    	
    	Properties props = new Properties();
    	props.put("hibernate.show_sql", "true");
    	props.put("hibernate.hbm2ddl.auto","create");
    	props.put("hibernate.dialect","org.hibernate.dialect.mySqlDialect");
    	props.put("hibernate.transaction.factroy_class","org.hibernate.transaction.JDBCTransactionFactory");
    	sessionFactoryBean.setHibernateProperties(props);
    	sessionFactoryBean.setPackagesToScan("com.coursecube.spring.entity");
    	return sessionFactoryBean;
    			
    }
    
    
     }
  
	
